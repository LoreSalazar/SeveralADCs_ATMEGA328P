
SeveralADCs.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000023c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001e8  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000023c  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000026c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  000002ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000077c  00000000  00000000  000002cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000068a  00000000  00000000  00000a48  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000310  00000000  00000000  000010d2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  000013e4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003a9  00000000  00000000  00001408  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000090  00000000  00000000  000017b1  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  00001841  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 40 00 	call	0x80	; 0x80 <main>
  78:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <main>:
#include <avr/io.h>
#include <util/delay.h>

int main(void)
{
	DDRD |= (1<<0); //Pin D0 como salida
  80:	8a b1       	in	r24, 0x0a	; 10
  82:	81 60       	ori	r24, 0x01	; 1
  84:	8a b9       	out	0x0a, r24	; 10
	DDRD |= (1<<1); //Pin D1 como salida
  86:	8a b1       	in	r24, 0x0a	; 10
  88:	82 60       	ori	r24, 0x02	; 2
  8a:	8a b9       	out	0x0a, r24	; 10
	DDRD |= (1<<2); //Pin D2 como salida
  8c:	8a b1       	in	r24, 0x0a	; 10
  8e:	84 60       	ori	r24, 0x04	; 4
  90:	8a b9       	out	0x0a, r24	; 10
	
	/******************** ADC *********************/
	//ADC voltage reference selection
	ADMUX &=~ (1<<REFS1);
  92:	ec e7       	ldi	r30, 0x7C	; 124
  94:	f0 e0       	ldi	r31, 0x00	; 0
  96:	80 81       	ld	r24, Z
  98:	8f 77       	andi	r24, 0x7F	; 127
  9a:	80 83       	st	Z, r24
	ADMUX |= (1<<REFS0);
  9c:	80 81       	ld	r24, Z
  9e:	80 64       	ori	r24, 0x40	; 64
  a0:	80 83       	st	Z, r24
	
	//ADC data adjust
	ADMUX &=~ (1<<ADLAR); //Ajuste a la izquierda
  a2:	80 81       	ld	r24, Z
  a4:	8f 7d       	andi	r24, 0xDF	; 223
  a6:	80 83       	st	Z, r24
	
	//Input channel selection
	//ADMUX &=~ (1<<MUX0); ADMUX &=~ (1<<MUX1); ADMUX &=~ (1<<MUX2); ADMUX &=~ (1<<MUX3); //Selección del ADC0
// 	ADMUX |=  (1<<MUX0); ADMUX |=  (1<<MUX1); ADMUX &=~ (1<<MUX2); ADMUX &=~ (1<<MUX3); //Selección del ADC3
	//ADMUX &=~  (1<<MUX0); ADMUX |=  (1<<MUX1); ADMUX |= (1<<MUX2); ADMUX &=~ (1<<MUX3); //Selección del ADC6
	ADCSRA |= (1 << ADATE); //Auto trigger habilitado
  a8:	ea e7       	ldi	r30, 0x7A	; 122
  aa:	f0 e0       	ldi	r31, 0x00	; 0
  ac:	80 81       	ld	r24, Z
  ae:	80 62       	ori	r24, 0x20	; 32
  b0:	80 83       	st	Z, r24
	
	//ADC enable
	ADCSRA |= (1<<ADEN);
  b2:	80 81       	ld	r24, Z
  b4:	80 68       	ori	r24, 0x80	; 128
  b6:	80 83       	st	Z, r24
	//ADC Start conversion
	ADCSRA |= (1<<ADSC);
  b8:	80 81       	ld	r24, Z
  ba:	80 64       	ori	r24, 0x40	; 64
  bc:	80 83       	st	Z, r24
	//ADC Prescaler select
	ADCSRA |= (1<<ADPS2); ADCSRA &=~ (1<< ADPS1); ADCSRA &=~ (1<<ADPS0); //Division entre 16 
  be:	80 81       	ld	r24, Z
  c0:	84 60       	ori	r24, 0x04	; 4
  c2:	80 83       	st	Z, r24
  c4:	80 81       	ld	r24, Z
  c6:	8d 7f       	andi	r24, 0xFD	; 253
  c8:	80 83       	st	Z, r24
  ca:	80 81       	ld	r24, Z
  cc:	8e 7f       	andi	r24, 0xFE	; 254
  ce:	80 83       	st	Z, r24
	
	//int adc1 = 0, adc2 = 0;
	
    while (1)
    {	
		ADCSRA |= (1 << ADEN); //Se habilita el ADC
  d0:	ea e7       	ldi	r30, 0x7A	; 122
  d2:	f0 e0       	ldi	r31, 0x00	; 0
  d4:	80 81       	ld	r24, Z
  d6:	80 68       	ori	r24, 0x80	; 128
  d8:	80 83       	st	Z, r24
		ADCSRA |= (1<<ADSC); //Comienza la conversión de ADC
  da:	80 81       	ld	r24, Z
  dc:	80 64       	ori	r24, 0x40	; 64
  de:	80 83       	st	Z, r24

		ADMUX &=~ (1<<MUX0); ADMUX &=~ (1<<MUX1); ADMUX &=~ (1<<MUX2); ADMUX &=~ (1<<MUX3); //Selección del ADC0
  e0:	ec e7       	ldi	r30, 0x7C	; 124
  e2:	f0 e0       	ldi	r31, 0x00	; 0
  e4:	80 81       	ld	r24, Z
  e6:	8e 7f       	andi	r24, 0xFE	; 254
  e8:	80 83       	st	Z, r24
  ea:	80 81       	ld	r24, Z
  ec:	8d 7f       	andi	r24, 0xFD	; 253
  ee:	80 83       	st	Z, r24
  f0:	80 81       	ld	r24, Z
  f2:	8b 7f       	andi	r24, 0xFB	; 251
  f4:	80 83       	st	Z, r24
  f6:	80 81       	ld	r24, Z
  f8:	87 7f       	andi	r24, 0xF7	; 247
  fa:	80 83       	st	Z, r24
		
		if(ADC>500){
  fc:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
 100:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
 104:	85 3f       	cpi	r24, 0xF5	; 245
 106:	91 40       	sbci	r25, 0x01	; 1
 108:	20 f0       	brcs	.+8      	; 0x112 <main+0x92>
			PORTD |= (1<<PORTD1);
 10a:	8b b1       	in	r24, 0x0b	; 11
 10c:	82 60       	ori	r24, 0x02	; 2
 10e:	8b b9       	out	0x0b, r24	; 11
 110:	03 c0       	rjmp	.+6      	; 0x118 <main+0x98>
		}else{
			PORTD &=~ (1<<PORTD1);
 112:	8b b1       	in	r24, 0x0b	; 11
 114:	8d 7f       	andi	r24, 0xFD	; 253
 116:	8b b9       	out	0x0b, r24	; 11
		}
		
		ADCSRA |= (1 << ADIF); //Se habilita cuando la conversión ADC termina
 118:	ea e7       	ldi	r30, 0x7A	; 122
 11a:	f0 e0       	ldi	r31, 0x00	; 0
 11c:	80 81       	ld	r24, Z
 11e:	80 61       	ori	r24, 0x10	; 16
 120:	80 83       	st	Z, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 122:	8f e3       	ldi	r24, 0x3F	; 63
 124:	9c e9       	ldi	r25, 0x9C	; 156
 126:	01 97       	sbiw	r24, 0x01	; 1
 128:	f1 f7       	brne	.-4      	; 0x126 <main+0xa6>
 12a:	00 c0       	rjmp	.+0      	; 0x12c <main+0xac>
 12c:	00 00       	nop
		
		_delay_ms(10);
		
		ADCSRA |= (1 << ADEN); //Se habilita el ADC
 12e:	80 81       	ld	r24, Z
 130:	80 68       	ori	r24, 0x80	; 128
 132:	80 83       	st	Z, r24
		ADCSRA |= (1<<ADSC); //Comienza la conversión de ADC
 134:	80 81       	ld	r24, Z
 136:	80 64       	ori	r24, 0x40	; 64
 138:	80 83       	st	Z, r24

		ADMUX &=~ (1<<MUX0); ADMUX |= (1<<MUX1); ADMUX |= (1<<MUX2); ADMUX &=~ (1<<MUX3); //Selección del ADC6
 13a:	ec e7       	ldi	r30, 0x7C	; 124
 13c:	f0 e0       	ldi	r31, 0x00	; 0
 13e:	80 81       	ld	r24, Z
 140:	8e 7f       	andi	r24, 0xFE	; 254
 142:	80 83       	st	Z, r24
 144:	80 81       	ld	r24, Z
 146:	82 60       	ori	r24, 0x02	; 2
 148:	80 83       	st	Z, r24
 14a:	80 81       	ld	r24, Z
 14c:	84 60       	ori	r24, 0x04	; 4
 14e:	80 83       	st	Z, r24
 150:	80 81       	ld	r24, Z
 152:	87 7f       	andi	r24, 0xF7	; 247
 154:	80 83       	st	Z, r24
		if(ADC>500){
 156:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
 15a:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
 15e:	85 3f       	cpi	r24, 0xF5	; 245
 160:	91 40       	sbci	r25, 0x01	; 1
 162:	20 f0       	brcs	.+8      	; 0x16c <main+0xec>
			PORTD |= (1<<PORTD2);
 164:	8b b1       	in	r24, 0x0b	; 11
 166:	84 60       	ori	r24, 0x04	; 4
 168:	8b b9       	out	0x0b, r24	; 11
 16a:	03 c0       	rjmp	.+6      	; 0x172 <main+0xf2>
		}else{
			PORTD &=~ (1<<PORTD2);
 16c:	8b b1       	in	r24, 0x0b	; 11
 16e:	8b 7f       	andi	r24, 0xFB	; 251
 170:	8b b9       	out	0x0b, r24	; 11
		}
				
		ADCSRA |= (1 << ADIF); //Se habilita cuando la conversión ADC termina
 172:	ea e7       	ldi	r30, 0x7A	; 122
 174:	f0 e0       	ldi	r31, 0x00	; 0
 176:	80 81       	ld	r24, Z
 178:	80 61       	ori	r24, 0x10	; 16
 17a:	80 83       	st	Z, r24
 17c:	8f e3       	ldi	r24, 0x3F	; 63
 17e:	9c e9       	ldi	r25, 0x9C	; 156
 180:	01 97       	sbiw	r24, 0x01	; 1
 182:	f1 f7       	brne	.-4      	; 0x180 <main+0x100>
 184:	00 c0       	rjmp	.+0      	; 0x186 <main+0x106>
 186:	00 00       	nop
		
		_delay_ms(10);
				
		ADCSRA |= (1 << ADEN); //Se habilita el ADC
 188:	80 81       	ld	r24, Z
 18a:	80 68       	ori	r24, 0x80	; 128
 18c:	80 83       	st	Z, r24
		ADCSRA |= (1<<ADSC); //Comienza la conversión de ADC
 18e:	80 81       	ld	r24, Z
 190:	80 64       	ori	r24, 0x40	; 64
 192:	80 83       	st	Z, r24

		ADMUX |= (1<<MUX0); ADMUX |= (1<<MUX1); ADMUX &=~ (1<<MUX2); ADMUX &=~ (1<<MUX3); //Selección del ADC3
 194:	ec e7       	ldi	r30, 0x7C	; 124
 196:	f0 e0       	ldi	r31, 0x00	; 0
 198:	80 81       	ld	r24, Z
 19a:	81 60       	ori	r24, 0x01	; 1
 19c:	80 83       	st	Z, r24
 19e:	80 81       	ld	r24, Z
 1a0:	82 60       	ori	r24, 0x02	; 2
 1a2:	80 83       	st	Z, r24
 1a4:	80 81       	ld	r24, Z
 1a6:	8b 7f       	andi	r24, 0xFB	; 251
 1a8:	80 83       	st	Z, r24
 1aa:	80 81       	ld	r24, Z
 1ac:	87 7f       	andi	r24, 0xF7	; 247
 1ae:	80 83       	st	Z, r24
		if(ADC>500){
 1b0:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
 1b4:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
 1b8:	85 3f       	cpi	r24, 0xF5	; 245
 1ba:	91 40       	sbci	r25, 0x01	; 1
 1bc:	20 f0       	brcs	.+8      	; 0x1c6 <main+0x146>
			PORTD |= (1<<PORTD0);
 1be:	8b b1       	in	r24, 0x0b	; 11
 1c0:	81 60       	ori	r24, 0x01	; 1
 1c2:	8b b9       	out	0x0b, r24	; 11
 1c4:	03 c0       	rjmp	.+6      	; 0x1cc <main+0x14c>
		}else{
			PORTD &=~ (1<<PORTD0);
 1c6:	8b b1       	in	r24, 0x0b	; 11
 1c8:	8e 7f       	andi	r24, 0xFE	; 254
 1ca:	8b b9       	out	0x0b, r24	; 11
		}
		
		ADCSRA |= (1 << ADIF); //Se habilita cuando la conversión ADC termina
 1cc:	ea e7       	ldi	r30, 0x7A	; 122
 1ce:	f0 e0       	ldi	r31, 0x00	; 0
 1d0:	80 81       	ld	r24, Z
 1d2:	80 61       	ori	r24, 0x10	; 16
 1d4:	80 83       	st	Z, r24
 1d6:	8f e3       	ldi	r24, 0x3F	; 63
 1d8:	9c e9       	ldi	r25, 0x9C	; 156
 1da:	01 97       	sbiw	r24, 0x01	; 1
 1dc:	f1 f7       	brne	.-4      	; 0x1da <main+0x15a>
 1de:	00 c0       	rjmp	.+0      	; 0x1e0 <main+0x160>
 1e0:	00 00       	nop
 1e2:	76 cf       	rjmp	.-276    	; 0xd0 <main+0x50>

000001e4 <_exit>:
 1e4:	f8 94       	cli

000001e6 <__stop_program>:
 1e6:	ff cf       	rjmp	.-2      	; 0x1e6 <__stop_program>
